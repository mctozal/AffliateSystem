@page "/register"
@using Blazored.LocalStorage
@using MeSoft.Blazor.Models
@using MeSoft.Blazor.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthService AuthService


<h3>Register</h3>

<EditForm FormName="RegisterForm" Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="registerModel.Email" class="form-control" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="registerModel.FirstName" class="form-control" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="registerModel.LastName" class="form-control" />
    </div>

    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate @bind-Value="registerModel.DateOfBirth" class="form-control" />
        <ValidationMessage For="@(() => registerModel.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private RegisterViewModel registerModel = new RegisterViewModel();
    private string errorMessage;

    private bool isLoading = false;

    private async Task HandleRegister()
    {
        Console.WriteLine($"Email: {registerModel.Email}, Password: {registerModel.Password}, DOB: {registerModel.DateOfBirth}");
        isLoading = true;
        var (success, error) = await AuthService.RegisterAsync(registerModel);
        if (!success)
        {
            errorMessage = error;
        }
        isLoading = false;
    }
}