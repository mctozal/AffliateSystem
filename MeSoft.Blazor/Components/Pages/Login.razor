@page "/login"
@using Blazored.LocalStorage
@using MeSoft.Blazor.Models
@using MeSoft.Blazor.Services
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthService AuthService

<h3>Login</h3>

<EditForm FormName="LoginForm" Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @(isLoading ? "Logging in..." : "Login")
    </button>
</EditForm>

<div class="form-group">
    <a href="register">Register</a>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private LoginViewModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var (success, error) = await AuthService.LoginAsync(loginModel);
            if (success)
            {
                Navigation.NavigateTo("/"); // Redirect to home page on success
            }
            else
            {
                errorMessage = error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred";
            // Consider logging the exception
        }
        finally
        {
            isLoading = false;
        }
    }
}